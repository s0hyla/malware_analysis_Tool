# Ex of File-Path is C:\Windows\System32\notepad.exe
# Malware Analysis Tool

import hashlib
import pefile
import datetime


def calculate_md5(file_path):
    """Calculate MD5 hash of a file."""
    md5 = hashlib.md5()
    with open(file_path, 'rb') as file:
        for chunk in iter(lambda: file.read(4096), b''):
            md5.update(chunk)
    return md5.hexdigest()


def analyze_pe(file_path):
    """Analyze PE (Portable Executable) files."""
    try:
        pe = pefile.PE(file_path)

        # Extract and print PE information
        print("[*] PE Information:")
        print(f"    - Image Base: 0x{pe.OPTIONAL_HEADER.ImageBase:08X}")
        print(f"    - Entry Point: 0x{pe.OPTIONAL_HEADER.AddressOfEntryPoint:08X}")
        print(f"    - Number of Sections: {len(pe.sections)}")

        # Print section information
        print("\n    Section Information:")
        for section in pe.sections:
            section_name = section.Name.decode('utf-8').rstrip('\x00')
            print(f"        - Name: {section_name}")
            print(f"          Virtual Address: 0x{section.VirtualAddress:08X}")
            print(f"          Size of Raw Data: {section.SizeOfRawData} bytes")
            print(f"          Entropy: {section.get_entropy()}")

        # Print imports and exports
        print("\n    Imports:")
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print(f"        - {entry.dll.decode('utf-8')}")
            for imp in entry.imports:
                import_name = imp.name.decode('utf-8') if imp.name else "N/A"
                print(f"          - {import_name}")

        # Check if EXPORT directory is present
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') and pe.DIRECTORY_ENTRY_EXPORT:
            print("\n    Exports:")
            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                export_name = exp.name.decode('utf-8') if exp.name else "N/A"
                print(f"        - {export_name}")
        else:
            print("\n    No export information available in this PE file.")

        # Add more analysis based on your requirements

    except pefile.PEFormatError as e:
        print(f"[-] Error analyzing PE file: {e}")


def main():
    # Get file path from user
    file_path = input("Enter the path of the file to analyze: ")

    # Calculate and print MD5 hash
    md5_hash = calculate_md5(file_path)
    print(f"\n[*] MD5 Hash: {md5_hash}")

    # Analyze PE files
    analyze_pe(file_path)

    # Print analysis completion time
    print(f"\n[*] Analysis completed at {datetime.datetime.now()}")


if __name__ == "__main__":
    main()
